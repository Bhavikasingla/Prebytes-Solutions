Ques 1 What does the following function do for a given Linked List with first node as head?

void fun1(struct node* head)
{
  if(head == NULL)
    return;
  
  fun1(head->next);
  cout << head->data
}

a) Prints all nodes of linked lists
b) Prints all nodes of linked list in reverse order
c) Prints alternate nodes of Linked List
d) Prints alternate nodes in reverse order

Ans b) Prints all nodes of linked list in reverse order

Ques 2 Which of the following is not a disadvantage to the usage of array?

a) Fixed size
b) You know the size of the array prior to allocation
c) Insertion based on position
d) Accessing elements at specified positions

Ans d) Accessing elements at specified positions

Ques 3 What is the time complexity of inserting at the end in dynamic arrays?

a) O(1)
b) O(n)
c) O(logn)
d) Either O(1) or O(n)

Ans d) Either O(1) or O(n)

Ques 4 What is the space complexity for deleting a linked list?
a) O(1)
b) O(n)
c) Either O(1) or O(n)
d) O(logn)

Ans a) O(1)

Ques 5 The following function reverse() is supposed to reverse a singly linked list. There is one line missing at the end of the function.

/* Link list node */
struct node
{
    int data;
    struct node* next;
};
 
/* head_ref is a double pointer which points to head (or start) pointer
  of linked list */
static void reverse(struct node** head_ref)
{
    struct node* prev   = NULL;
    struct node* current = *head_ref;
    struct node* next;
    while (current != NULL)
    {
        next  = current->next; 
        current->next = prev;  
        prev = current;
        current = next;
    }
    /*ADD A STATEMENT HERE*/
}
What should be added in place of "/*ADD A STATEMENT HERE*/", so that the function correctly reverses a linked list.

a) *head_ref = prev;
b) *head_ref = current;
c) *head_ref = next;
d) *head_ref = NULL;

Ans a) *head_ref = prev;

Ques 6 What is the output of following function for start pointing to first node of following linked list? 1->2->3->4->5->6

void fun(struct node* start)
{
  if(start == NULL)
    return;
  cout << start->data;
  
  if(start->next != NULL )
    fun(start->next->next);
  cout << start->data;
}

a) 1 4 6 6 4 1
b) 1 3 5 1 3 5
c) 1 2 3 5
d) 1 3 5 5 3 1

Ans d) 1 3 5 5 3 1

Ques 7 Which of these is not an application of linked lists?

a) To implement file systems
b) For separate chaining in hash-tables
c) To implement non-binary trees
d) Random Access of elements

Ans d) Random Access of elements

Ques 8 The following C++ function takes a simply-linked list as input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank. Choose the correct alternative to replace the blank line.

typedef struct node
{
  int value;
  struct node *next;
}Node;
  
Node *move_to_front(Node *head)
{
  Node *p, *q;
  if ((head == NULL: || (head->next == NULL))
    return head;
  q = NULL; p = head;
  while (p-> next !=NULL)
  {
    q = p;
    p = p->next;
  }
  __________
  return head;
}
 
a) q = NULL; p->next = head; head = p;
b) q->next = NULL; head = p; p->next = head;
c) head = p; p->next = q; q->next = NULL;
d) q->next = NULL; p->next = head; head = p;

Ans d) q->next = NULL; p->next = head; head = p;

Ques 9 Which of the following is false about a doubly linked list?

a) We can navigate in both the directions
b) It requires more space than a singly linked list
c) The insertion and deletion of a node take a bit longer
d) None of the mentioned

Ans d) None of the mentioned

Ques 10 The following C++ function takes a single-linked list of integers as a parameter and rearranges the elements of the list. The function is called with the list containing the integers 1, 2, 3, 4, 5, 6, 7 in the given order. What will be the contents of the list after the function completes execution?

struct node
{
  int value;
  struct node *next;
};
void rearrange(struct node *list)
{
  struct node *p, * q;
  int temp;
  if ((!list) || !list->next)
      return;
  p = list;
  q = list->next;
  while(q)
  {
     temp = p->value;
     p->value = q->value;
     q->value = temp;
     p = q->next;
     q = p?p->next:0;
  }
}

a) 1,2,3,4,5,6,7
b) 2,1,4,3,6,5,7
c) 1,3,2,5,4,7,6
d) 2,3,4,5,6,7,1

Ans b) 2,1,4,3,6,5,7

Ques 11 What is the time complexity to count the number of elements in the linked list?

a) O(N)
b) O(N^2)
c) O(logn)
d) None of the mentioned

Ans a) O(N)